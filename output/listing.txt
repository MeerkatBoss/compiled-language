[0x0000] 12 08 00 00 00        |			call main	; Program entry point
[0x0005] 48 04                 |			pop rdx		; Ignore return status
[0x0007] 0a                    |			halt		; Stop program execution
[0x0008]                       |	
[0x0008]                       |	
[0x0008]                       |	main:
[0x0008] 47 06                 |			push rbp
[0x000a] c8 07                 |			pop [rsp]
[0x000c] 47 07                 |			push rsp
[0x000e] 02                    |			inc
[0x000f] 14                    |			dup
[0x0010] 48 07                 |			pop rsp
[0x0012] 48 06                 |			pop rbp
[0x0014]                       |	%def .x.var_0x0 0
[0x0014] 47 07                 |			push rsp
[0x0016] 02                    |			inc
[0x0017] 48 07                 |			pop rsp
[0x0019] 12 1d 01 00 00        |			call read
[0x001e] e8 06 00 00 00 00     |			pop [rbp+.x.var_0x0]
[0x0024]                       |	%def .y.var_0x1 1
[0x0024] 47 07                 |			push rsp
[0x0026] 02                    |			inc
[0x0027] 48 07                 |			pop rsp
[0x0029] 12 1d 01 00 00        |			call read
[0x002e] e8 06 01 00 00 00     |			pop [rbp+.y.var_0x1]
[0x0034] e7 06 00 00 00 00     |			push [rbp+.x.var_0x0]
[0x003a] e7 06 01 00 00 00     |			push [rbp+.y.var_0x1]
[0x0040] 01                    |			add
[0x0041] 12 1a 01 00 00        |			call print
[0x0046] 48 04                 |			pop rdx		; Discard function call result.
[0x0048] 27 00 00 00 00        |			push 0
[0x004d] 0b 52 00 00 00        |			jmp .main.end
[0x0052]                       |	.main.end:
[0x0052] 47 06                 |			push rbp
[0x0054] 04                    |			dec
[0x0055] 14                    |			dup
[0x0056] 48 06                 |			pop rbp
[0x0058] 48 07                 |			pop rsp
[0x005a] c7 06                 |			push [rbp]
[0x005c] 48 06                 |			pop rbp
[0x005e] 13                    |			ret
[0x005f]                       |	
[0x005f]                       |	; __cmp_op.asm
[0x005f]                       |	
[0x005f] 0d 6a 00 00 00        |	__op.lt:	jl __op.lt.true
[0x0064] 27 00 00 00 00        |			push 0
[0x0069] 13                    |			ret
[0x006a] 27 e8 03 00 00        |	__op.lt.true:	push 1000
[0x006f] 13                    |			ret
[0x0070]                       |	
[0x0070] 0c 7b 00 00 00        |	__op.gt:	jg __op.gt.true
[0x0075] 27 00 00 00 00        |			push 0
[0x007a] 13                    |			ret
[0x007b] 27 e8 03 00 00        |	__op.gt.true:	push 1000
[0x0080] 13                    |			ret
[0x0081]                       |	
[0x0081] 11 8c 00 00 00        |	__op.leq:	jle __op.leq.true
[0x0086] 27 00 00 00 00        |			push 0
[0x008b] 13                    |			ret
[0x008c] 27 e8 03 00 00        |	__op.leq.true:	push 1000
[0x0091] 13                    |			ret
[0x0092]                       |	
[0x0092] 10 9d 00 00 00        |	__op.geq:	jge __op.geq.true
[0x0097] 27 00 00 00 00        |			push 0
[0x009c] 13                    |			ret
[0x009d] 27 e8 03 00 00        |	__op.geq.true:	push 1000
[0x00a2] 13                    |			ret
[0x00a3]                       |	
[0x00a3] 0e ae 00 00 00        |	__op.eq:	je __op.eq.true
[0x00a8] 27 00 00 00 00        |			push 0
[0x00ad] 13                    |			ret
[0x00ae] 27 e8 03 00 00        |	__op.eq.true:	push 1000
[0x00b3] 13                    |			ret
[0x00b4]                       |	
[0x00b4] 0f bf 00 00 00        |	__op.neq:	jne __op.neq.true
[0x00b9] 27 00 00 00 00        |			push 0
[0x00be] 13                    |			ret
[0x00bf] 27 e8 03 00 00        |	__op.neq.true:	push 1000
[0x00c4] 13                    |			ret
[0x00c5]                       |			
[0x00c5]                       |	; __logic_op.asm
[0x00c5]                       |	
[0x00c5] 05                    |	__op.and:	mul
[0x00c6] 27 00 00 00 00        |			push 0
[0x00cb] 0f d6 00 00 00        |			jne __op.and.true
[0x00d0] 27 00 00 00 00        |			push 0
[0x00d5] 13                    |			ret
[0x00d6] 27 e8 03 00 00        |	__op.and.true:	push 1000
[0x00db] 13                    |			ret
[0x00dc]                       |	
[0x00dc] 27 00 00 00 00        |	__op.or:	push 0
[0x00e1] 0e ee 00 00 00        |			je __op.or.second
[0x00e6] 48 04                 |			pop rdx
[0x00e8] 27 e8 03 00 00        |			push 1000
[0x00ed] 13                    |			ret
[0x00ee] 27 00 00 00 00        |	__op.or.second:	push 0
[0x00f3] 0e fe 00 00 00        |			je __op.or.false
[0x00f8] 27 e8 03 00 00        |			push 1000
[0x00fd] 13                    |			ret
[0x00fe] 27 00 00 00 00        |	__op.or.false:	push 0
[0x0103] 13                    |			ret
[0x0104]                       |	
[0x0104] 27 00 00 00 00        |	__op.not:	push 0
[0x0109] 0e 14 01 00 00        |			je __op.not.true
[0x010e] 27 00 00 00 00        |			push 0
[0x0113] 13                    |			ret
[0x0114] 27 e8 03 00 00        |	__op.not.true:	push 1000
[0x0119] 13                    |			ret
[0x011a]                       |			
[0x011a]                       |	; stdlib.asm
[0x011a]                       |	
[0x011a]                       |	
[0x011a]                       |	; print(x)
[0x011a] 14                    |	print:		dup
[0x011b] 09                    |			out
[0x011c] 13                    |			ret
[0x011d]                       |	
[0x011d]                       |	; read()
[0x011d] 15                    |	read:		get
[0x011e] 13                    |			ret
[0x011f]                       |	
[0x011f]                       |	; abs(x)
[0x011f] 14                    |	abs:		dup
[0x0120] 27 00 00 00 00        |			push 0
[0x0125] 11 2b 01 00 00        |			jle abs.neg
[0x012a] 13                    |			ret
[0x012b] 27 ff ff ff ff        |	abs.neg:	push -1
[0x0130] 05                    |			mul
[0x0131] 13                    |			ret
[0x0132]                       |	
[0x0132]                       |	
[0x0132]                       |	%def vbuf.y0 20
[0x0132]                       |	%def vbuf.x0 50
[0x0132]                       |	%def vbuf.height 41
[0x0132]                       |	%def vbuf.width 101
[0x0132]                       |	%def vbuf.start 61395
[0x0132]                       |	
[0x0132]                       |	; set_pixel(x, y, ch)
[0x0132] 47 01                 |	set_pixel:	push rax
[0x0134] c8 07                 |			pop [rsp]		; store rax in [rsp]
[0x0136] 47 02                 |			push rbx
[0x0138] e8 07 01 00 00 00     |			pop [rsp+1]		; store rbx in [rsp+1]
[0x013e] 47 04                 |			push rdx
[0x0140] e8 07 02 00 00 00     |			pop [rsp+2]		; store rdx in [rsp+2]
[0x0146]                       |	
[0x0146] 27 e8 03 00 00        |			push 1000
[0x014b] 06                    |			div
[0x014c] 48 04                 |			pop rdx			; rdx = ch / 1000
[0x014e]                       |	
[0x014e] 27 29 00 00 00        |			push vbuf.height
[0x0153] 05                    |			mul
[0x0154] 27 d0 07 00 00        |			push 2000
[0x0159] 06                    |			div
[0x015a] 27 14 00 00 00        |			push vbuf.y0
[0x015f] 01                    |			add
[0x0160] 48 02                 |			pop rbx			; rbx = (y * h)/2000 + y0
[0x0162]                       |	
[0x0162] 27 65 00 00 00        |			push vbuf.width
[0x0167] 05                    |			mul
[0x0168] 27 d0 07 00 00        |			push 2000
[0x016d] 06                    |			div
[0x016e] 27 32 00 00 00        |			push vbuf.x0
[0x0173] 01                    |			add
[0x0174] 48 01                 |			pop rax			; rax = (x * w)/2000 + x0
[0x0176]                       |	
[0x0176] 27 65 00 00 00        |			push vbuf.width
[0x017b] 47 02                 |			push rbx
[0x017d] 05                    |			mul
[0x017e] 47 01                 |			push rax
[0x0180] 01                    |			add
[0x0181] 48 01                 |			pop rax			; rax = rbx*2 + rax
[0x0183]                       |	
[0x0183] 47 04                 |			push rdx
[0x0185] e8 01 d3 ef 00 00     |			pop [vbuf.start+rax]	; set pixel in memory
[0x018b]                       |	
[0x018b] 47 04                 |			push rdx
[0x018d]                       |	
[0x018d] c7 07                 |			push [rsp]
[0x018f] 48 01                 |			pop rax			; restore rax from [rsp]
[0x0191] e7 07 01 00 00 00     |			push [rsp+1]
[0x0197] 48 02                 |			pop rbx			; restore rbx from [rsp+1]
[0x0199] e7 07 02 00 00 00     |			push [rsp+2]
[0x019f] 48 04                 |			pop rdx			; restore rdx from [rsp+2]
[0x01a1]                       |	
[0x01a1] 13                    |			ret
[0x01a2]                       |	
[0x01a2]                       |	; flush()
[0x01a2] 27 d3 ef 00 00        |	flush:		push vbuf.start
[0x01a7] 48 05                 |			pop vbp
[0x01a9] 27 00 00 00 00        |			push 0
[0x01ae] 13                    |			ret
[0x01af]                       |	
[0x01af]                       |	
[0x01af]                       |	%def sq.min 0
[0x01af]                       |	%def sq.max 100000000
[0x01af]                       |	
[0x01af]                       |	; sqrt(x)
[0x01af] 47 01                 |	sqrt:		push rax		; save rax in [rsp]	
[0x01b1] c8 07                 |			pop [rsp]
[0x01b3]                       |	
[0x01b3] 48 01                 |			pop rax			; store parameter in rax
[0x01b5]                       |	
[0x01b5] 47 02                 |			push rbx		; save register values
[0x01b7] 47 03                 |			push rcx
[0x01b9] 47 04                 |			push rdx
[0x01bb]                       |	
[0x01bb] 27 00 00 00 00        |			push sq.min
[0x01c0] 48 02                 |			pop rbx			; rbx = sq.min
[0x01c2]                       |	
[0x01c2] 27 00 e1 f5 05        |			push sq.max
[0x01c7] 48 04                 |			pop rdx			; rdx = sq.max
[0x01c9]                       |	
[0x01c9] 47 04                 |	sq.loop.start:	push rdx
[0x01cb] 47 02                 |			push rbx
[0x01cd] 03                    |			sub
[0x01ce] 27 01 00 00 00        |			push 1
[0x01d3] 11 03 02 00 00        |			jle sq.loop.end		; if (rdx - rbx <= 1) break;
[0x01d8]                       |	
[0x01d8] 47 02                 |			push rbx
[0x01da] 47 04                 |			push rdx
[0x01dc] 01                    |			add
[0x01dd] 27 02 00 00 00        |			push 2
[0x01e2] 06                    |			div			; m = (rbx + rdx)/2
[0x01e3]                       |	
[0x01e3] 48 03                 |			pop rcx			; rcx = m
[0x01e5]                       |	
[0x01e5] 47 03                 |			push rcx		; m
[0x01e7]                       |	
[0x01e7] 47 01                 |			push rax
[0x01e9] 47 03                 |			push rcx
[0x01eb] 06                    |			div			; rax / m
[0x01ec]                       |	
[0x01ec] 0c fa 01 00 00        |			jg sq.greater
[0x01f1]                       |	
[0x01f1] 47 03                 |			push rcx		; if (m <= rax/m) rbx = m;
[0x01f3] 48 02                 |			pop rbx
[0x01f5] 0b c9 01 00 00        |			jmp sq.loop.start
[0x01fa]                       |	
[0x01fa] 47 03                 |	sq.greater:	push rcx
[0x01fc] 48 04                 |			pop rdx
[0x01fe] 0b c9 01 00 00        |			jmp sq.loop.start	; else rdx = m;
[0x0203]                       |	
[0x0203] 47 02                 |	sq.loop.end:	push rbx
[0x0205] 27 e8 03 00 00        |			push 1000
[0x020a] 05                    |			mul
[0x020b] 27 20 00 00 00        |			push 32
[0x0210] 06                    |			div
[0x0211] 48 01                 |			pop rax			; rax = rbx * 1000 / 32 (normalized with fixed precision)
[0x0213]                       |	
[0x0213] 48 04                 |			pop rdx
[0x0215] 48 03                 |			pop rcx
[0x0217] 48 02                 |			pop rbx			; restore register values
[0x0219]                       |	
[0x0219] 47 01                 |			push rax		; return rax
[0x021b]                       |	
[0x021b] c7 07                 |			push [rsp]
[0x021d] 48 01                 |			pop rax			; restore rax from [rsp]
[0x021f]                       |	
[0x021f] 13                    |			ret
[0x0220]                       |	
[0x0220]                       |	
